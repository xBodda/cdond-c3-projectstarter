version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install Node.js 18
    steps:
      - run:
          name: Install Node.js 18
          command: |
            npm install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  destroy-environment:
    description: Destroy-environment on fail
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/cicd-db-migration-<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 )); 
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
                echo "revert migrations succeed"
            else
              echo "revert migrations failed"
            fi
     
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Tar since its a requesite 
          command: |
            yum -y install tar gzip jq git

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople 
 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              echo [web] > ~/inventory.txt
              aws ec2 describe-instances \
                  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> ~/inventory.txt
              cat ~/inventory.txt

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ca:1e:08:3d:6c:b6:95:5b:1d:8d:cc:3f:de:e3:47:b1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            pip install awscli
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm cache clean --force
            npm install
            npm run build -prod
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: Send migration results to kvdb.io 
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl -k https://kvdb.io/E9562W5U3YjbDVEsHjUzgk/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output=text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL=${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              echo ENVIRONMENT=production >> "frontend/.env"
              echo NODE_ENV=production >> "frontend/.env"
              cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              aws s3 ls
              ls
              echo ${CIRCLE_WORKFLOW_ID:0:7}
              npm audit fix --audit-level=critical 
              npm install
              npm run build
              # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
  
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - add_ssh_keys:
          fingerprints: 
            - "ca:1e:08:3d:6c:b6:95:5b:1d:8d:cc:3f:de:e3:47:b1"

      - run:
          name: Install AWS_CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli

      - attach_workspace:
          at: ~/

      - run:
          name: Install Ansible
          command: |
            sudo apt-get update
            sudo apt-get install ansible -y

      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install

      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv backend/artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment

  smoke-test:
    docker:
      - image: alpine:latest 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache aws-cli curl tar gzip nodejs npm
      
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export NO_PROXY=<services_box_ip>
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo Backend URL: ${API_URL}/api/status
            sleep 60
            # curl -v $API_URL
            if curl $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo "frontend smoke test success"
              exit 1
            else
              echo "frontend smoke test failed"
              exit 1
            fi

      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]